//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;
use serde::Serialize;

use super::sea_orm_active_enums::Status;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize)]
#[sea_orm(table_name = "sys_user")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
    pub id: String,
    #[sea_orm(column_type = "Text", unique)]
    pub username: String,
    #[sea_orm(column_type = "Text")]
    pub password: String,
    #[sea_orm(column_type = "Text")]
    pub domain: String,
    pub built_in: bool,
    #[sea_orm(column_type = "Text", nullable)]
    pub avatar: Option<String>,
    #[sea_orm(column_type = "Text", nullable, unique)]
    pub email: Option<String>,
    #[sea_orm(column_type = "Text", nullable, unique)]
    pub phone_number: Option<String>,
    #[sea_orm(column_type = "Text")]
    pub nick_name: String,
    pub status: Status,
    pub created_at: DateTime,
    #[sea_orm(column_type = "Text")]
    pub created_by: String,
    pub updated_at: Option<DateTime>,
    #[sea_orm(column_type = "Text", nullable)]
    pub updated_by: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::sys_domain::Entity",
        from = "Column::Domain",
        to = "super::sys_domain::Column::Code"
    )]
    SysDomain,
    #[sea_orm(has_many = "super::sys_user_role::Entity")]
    SysUserRole,
}

impl Related<super::sys_domain::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SysDomain.def()
    }
}

impl Related<super::sys_user_role::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SysUserRole.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
